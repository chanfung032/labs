package t

import (
	"syscall"
	"testing"
)

func TestSendIPv6CookedPacket(t *testing.T) {
	// IP/TCP 包，不包含二层头
	pkt := []byte{
		0x60, 0x00, 0x00, 0x00, 0x00, 0x14, 0x06, 0xff,
		0x24, 0x10, 0x8c, 0x00, 0x6c, 0x21, 0x10, 0x51,
		0x00, 0x00, 0x00, 0xff, 0xb0, 0xaf, 0x27, 0x9a,
		0x24, 0x11, 0x8c, 0x00, 0x6c, 0x21, 0x10, 0x51,
		0x00, 0x00, 0x00, 0xff, 0xb0, 0xaf, 0x27, 0x9a,
		0x30, 0x39, 0x00, 0x50, 0x00, 0x00, 0x03, 0xe8,
		0x00, 0x00, 0x00, 0x00, 0x50, 0x04, 0x02, 0x00,
		0x6d, 0xd7, 0x00, 0x00,
	}
	conn, err := syscall.Socket(syscall.AF_PACKET, syscall.SOCK_DGRAM, syscall.IPPROTO_RAW)
	if err != nil {
		t.Fatal("create socket:", err)
	}
	defer syscall.Close(conn)
	addr := &syscall.SockaddrLinklayer{
		Ifindex:  1,                                                       // lo
		Protocol: 0xdd86,                                                  // ntohs(syscall.ETH_P_IPV6),
		Halen:    6,                                                       // Length of MAC address
		Addr:     [8]byte{0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8}, // 目的mac 地址
	}
	if err := syscall.Sendto(conn, pkt, 0, addr); err != nil {
		t.Fatal("socket.sendto:", err)
	}
}

func TestSendIPv4CookedPacket(t *testing.T) {
	// IP/TCP 包，不包含二层头
	pkt := []byte{
		0x45, 0x00, 0x00, 0x28, 0x00, 0x00, 0x40, 0x00,
		0xff, 0x06, 0xa8, 0x13, 0xc0, 0xa8, 0x01, 0x02,
		0x09, 0x09, 0x09, 0x09, 0x30, 0x39, 0x00, 0x50,
		0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x00, 0x00,
		0x50, 0x04, 0x02, 0x00, 0xa5, 0xb3, 0x00, 0x00,
	}
	conn, err := syscall.Socket(syscall.AF_PACKET, syscall.SOCK_DGRAM, syscall.IPPROTO_RAW)
	if err != nil {
		t.Fatal("create socket:", err)
	}
	defer syscall.Close(conn)
	addr := &syscall.SockaddrLinklayer{
		Ifindex:  1,                                                       // lo
		Protocol: 0x0008,                                                  // ntohs(syscall.ETH_P_IP),
		Halen:    6,                                                       // Length of MAC address
		Addr:     [8]byte{0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8}, // 目的mac 地址
	}
	if err := syscall.Sendto(conn, pkt, 0, addr); err != nil {
		t.Fatal("socket.sendto:", err)
	}
}
